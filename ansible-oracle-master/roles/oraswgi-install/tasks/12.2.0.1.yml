---

  - name: Extract files to ORACLE_HOME (gi)
    unarchive: src={{ oracle_stage }}/{{ item.filename }}  dest={{ oracle_home_gi }} copy=no
    with_items: "{{oracle_sw_image_gi}}"
    args:
        creates: "{{ oracle_home_gi }}/root.sh"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
      - oragridswunpack
    when: checkgiinstall.stdout != "1" and oracle_install_version_gi == item.version and oracle_sw_copy|bool and oracle_sw_unpack|bool

  - name: Extract files to ORACLE_HOME (gi) (from remote location)
    unarchive: src={{ oracle_stage_remote }}/{{ item.filename }}  dest={{ oracle_home_gi }} copy=no
    with_items: "{{oracle_sw_image_gi}}"
    args:
        creates: "{{ oracle_home_gi }}/root.sh"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
    - oragridswunpack
    when: checkgiinstall.stdout != "1" and oracle_install_version_gi == item.version and not oracle_sw_copy|bool and oracle_sw_unpack|bool

  - name: Install cvuqdisk rpm
    yum: name="{{ oracle_home_gi }}/cv/rpm/{{ cvuqdisk_rpm }}" state=present
    when: configure_cluster
    tags: cvuqdisk
    ignore_errors: true

  - name: Recreate ORACLE_HOME (gi) on other nodes
    file: name={{ oracle_home_gi }} state=absent
    when: not master_node and configure_cluster and checkgiinstall.stdout != "1"

  - name: Recreate ORACLE_HOME (gi) on other nodes
    file: name={{ oracle_home_gi }}  mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    when: not master_node and configure_cluster and checkgiinstall.stdout != "1"

  - name: Setup response file for install (GI)
    template: src=grid-install.rsp.{{ oracle_install_version_gi }}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} owner="{{ grid_install_user }}" group={{ oracle_group }} mode=775 backup=yes
    with_items: "{{asm_diskgroups}}"
    tags:
      - responsefilegi
    when: master_node and checkgiinstall.stdout != "1" and item.diskgroup == oracle_asm_init_dg

  - name: Install Grid Infrastructure
    shell: "{{ oracle_home_gi }}/gridSetup.sh -responseFile {{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} -waitforcompletion -ignorePrereq -silent"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
      - oragridinstall
    when: master_node and checkgiinstall.stdout != "1" #and oracle_sw_unpack
    register: giinstall

  - debug: var=giinstall.stdout_lines
    when: master_node and checkgiinstall.stdout != "1"

  - name: Run oraInstroot script after installation
    shell: "{{ oracle_inventory_loc }}/orainstRoot.sh"
    become: yes
    tags:
      - runroot
    when: checkgiinstall.stdout != "1"

  - name: Run root script after installation (Master Node)
    shell: "{{ oracle_home_gi }}/root.sh"
    become: yes
    tags:
      - runroot
    when: master_node and checkgiinstall.stdout != "1"
    register: rootmaster

  - debug: var=rootmaster.stdout_lines
    when: master_node and checkgiinstall.stdout != "1"

  - name: Run root script after installation (Other Nodes)
    shell: "sleep {{ item.0 * 60 }}; {{ oracle_home_gi }}/root.sh"
    become: yes
    with_indexed_items: "{{groups[hostgroup]}}"
    tags:
      - runroot
    when: not master_node and checkgiinstall.stdout != "1" and inventory_hostname == item.1
    register: rootother

  - debug: var=rootother.stdout_lines
    when: not master_node and checkgiinstall.stdout != "1"

  - name: Execute ConfigTools
    shell: "{{ oracle_home_gi }}/gridSetup.sh -executeConfigTools -responseFile {{ oracle_rsp_stage }}/{{ oracle_grid_responsefile }} -silent"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
      - runconfigtool
    when: master_node and run_configtoolallcommand and checkgiinstall.stdout != "1"
    ignore_errors: true
    register: configtool
